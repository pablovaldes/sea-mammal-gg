{
    "contents" : "## This is the \"server\" file of the shiny app.\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(ggmap)\nlibrary(scales)\nlibrary(lubridate)\nlibrary(ggmap)\n\n## Load data\n## (The 'dat1Hz' has the 'dat1_gps' GPS data in it, interpolated between\n##   observed GPS locations, but the latter data file is smaller)\nload('Data/dat1_gps.RData') # Loads data frame with name 'dat1_gps'\nload('Data/dat1Hz.RData')  # Loads data frame with name 'dat1Hz'\nload('Data/magplot.RData') # Loads a pre-made version of magnetometer plot\n\n## \ndat1_gps$sec <- as.numeric(dat1_gps$time)\n\n## Get maps:\nmy_map_osm <- get_openstreetmap(c(-170.5, 56.5, -168, 57.75))\nmy_map_goo <- get_map(c(mean(dat1_gps$lon), mean(dat1_gps$lat)), \n                      zoom = 8, maptype = \"satellite\")\n\n## Overview map\noverview <- get_googlemap(c(mean(dat1_gps$lon), mean(dat1_gps$lat)),\n                          zoom = 4, maptype = \"satellite\",\n                          markers = data.frame(longitude=mean(dat1_gps$lon), \n                                               latitude=mean(dat1_gps$lat)))\n\n## Get interpolation functions for GPS locations:\nlat_intpol <- with(dat1_gps, approxfun(sec, lat))\nlon_intpol <- with(dat1_gps, approxfun(sec, lon))\n\n\n## Make a manual scale.\n# scale_dates <- 26:31\n# orig <- ymd_hms(\"1970-01-01 00:00:00\")\n# my_labs <- paste(\"Aug.\", scale_dates)\n# my_breaks <- as.integer(\n#     seconds(ymd_hms(paste0(\"2011-08-\", scale_dates, \" 00:00:00\"))) - \n#         seconds(orig))\n# date_legend <- scale_colour_gradientn(\"Date\",\n#                                       colours = rainbow(7),\n#                                       breaks = my_breaks,\n#                                       labels = my_labs)\n\n## Sunrise and sunset times for August 25-31, 2011.\n##  (sunrise/set times at http://www.sunrisesunset.com/)\nsunrise <- ymd_hms(c(\"2011-08-25 08:07:00\",\n                     \"2011-08-26 08:09:00\", \n                     \"2011-08-27 08:11:00\", \n                     \"2011-08-28 08:13:00\", \n                     \"2011-08-29 08:15:00\", \n                     \"2011-08-30 08:17:00\", \n                     \"2011-08-31 08:19:00\",\n                     \"2011-09-31 08:21:00\"))\nsunset <- ymd_hms(c(\"2011-08-25 22:40:00\",\n                    \"2011-08-26 22:37:00\", \n                    \"2011-08-27 22:35:00\", \n                    \"2011-08-28 22:32:00\", \n                    \"2011-08-29 22:29:00\", \n                    \"2011-08-30 22:27:00\", \n                    \"2011-08-31 22:24:00\"))\n\n## Starting GPS location (to represent Saint Paul Island, AK, since shiny\n##  seems to have a glitch with ggmap)\nlon0 <- dat1_gps$lon[1]\nlat0 <- dat1_gps$lat[1]\n\n## Here's the start of the shiny \"machinery\".\nshinyServer(function(input, output) {\n    \n    ## Get \"seconds\" range in POSIXct for which to subset.\n    sec_rng <- reactive({\n        t0 <- input$current_t - 1 # decimal days since the month started\n        delT <- input$delta_t\n        ## Convert from \"day of the month\" to \"seconds since 1970-01-01 00:00:00\".\n        t0sec <- as.numeric(ymd_hms(\"2011-08-01 00:00:00\") + seconds(t0*24*60*60))\n        delTsec <- delT*60\n        list(lower = t0sec - delTsec, upper = t0sec)\n    })\n    \n    ## Subset the data to the specified time.\n    thisdat <- reactive({\n        secrng <- sec_rng()\n        subset(dat1Hz, sec > secrng$lower & sec < secrng$upper)\n    })\n    thisgps <- reactive({\n        secrng <- sec_rng()\n        res <- subset(dat1_gps, sec > secrng$lower & sec < secrng$upper)\n        res2 <- as.data.frame(matrix(NA, ncol = ncol(res), nrow = nrow(res) + 2))\n        names(res2) <- names(res)\n        res2[2:nrow(res), ] <- res\n        ## interpolate:\n        res2$lat[1] <- lat_intpol(secrng$lower)\n        res2$lat[nrow(res2)] <- lat_intpol(secrng$upper)\n        res2$lon[1] <- lon_intpol(secrng$lower)\n        res2$lon[nrow(res2)] <- lon_intpol(secrng$upper)\n       na.omit(res[c(\"lon\", \"lat\")])\n    })\n    \n    ## The overhead plot:\n    ## NOTE: There seems to be a glitch with ggmap -- the background\n    ##  map can't be displayed. I'll put a red dot where Saint Paul Island is.\n    output$mapPlot <- renderPlot({\n        plotdat2 <- thisdat()\n        plotdat2$alpha <- log(1:nrow(plotdat2))\n        activex <- plotdat2$lon[nrow(plotdat2)]\n        activey <- plotdat2$lat[nrow(plotdat2)]\n        ggplot(aes(lon, lat), data = dat1_gps) +\n            geom_path(linetype = \"dotted\")  +\n            geom_path(data=plotdat2) +\n            xlim(-170.2955, -168.3307) +\n            ylim(57.02646, 57.55096) +\n            geom_point(x=lon0, y=lat0, size = 4, colour = \"red\") +\n            geom_point(x=activex, y=activey) +\n            labs(title = \"Overview\\n(Due to potential glitch, red dot = Saint Paul Island)\")\n    })\n    \n    ## The magnetometer plot\n    output$magPlot <- renderPlot({\n        plotdat <- thisdat()\n        plotdat <- na.omit(plotdat[c(\"time\", \"sec\", \"angle_lon\", \"angle_lat\", \n                                     \"hemisphere\", \"speed\")])\n        plotdat$alpha <- sqrt(1:nrow(plotdat))\n        magplot + \n            geom_point(data=plotdat, \n                       mapping=aes(size = speed, alpha = alpha)) +\n            scale_alpha_continuous(guide=FALSE) +\n            scale_size_continuous(trans = trans_new(\"\", \n                                                    transform = log,\n                                                    inverse = exp)) +\n            labs(title = \"Magnetometer data in polar coordinates,\\nprojected onto the plane.\")\n    })\n    \n    ## The depth plot\n    output$depthPlot <- renderPlot({\n        plotdat <- thisdat()\n        plotdat <- na.omit(plotdat[c(\"time\", \"depth\", \"night\", \"lightLev\")])\n        maxdepth <- max(plotdat$depth)\n        alphanight <- 0.3\n        ## Add night bands to the plot?\n        if (input$yes_night) {\n           night_ann <- list(\n               annotate(geom = \"rect\", xmin = sunset[1], xmax = sunrise[2], \n                        ymin = -maxdepth, ymax = 0, fill = \"black\", alpha = alphanight),\n               annotate(geom = \"rect\", xmin = sunset[2], xmax = sunrise[3], \n                        ymin = -maxdepth, ymax = 0, fill = \"black\", alpha = alphanight),\n               annotate(geom = \"rect\", xmin = sunset[3], xmax = sunrise[4], \n                        ymin = -maxdepth, ymax = 0, fill = \"black\", alpha = alphanight),\n               annotate(geom = \"rect\", xmin = sunset[4], xmax = sunrise[5], \n                        ymin = -maxdepth, ymax = 0, fill = \"black\", alpha = alphanight),\n               annotate(geom = \"rect\", xmin = sunset[5], xmax = sunrise[6], \n                        ymin = -maxdepth, ymax = 0, fill = \"black\", alpha = alphanight),\n               annotate(geom = \"rect\", xmin = sunset[6], xmax = sunrise[7], \n                        ymin = -maxdepth, ymax = 0, fill = \"black\", alpha = alphanight),\n               ylim(-maxdepth, 0),\n               xlim(min(plotdat$time), max(plotdat$time)) )\n        } else {\n            night_ann <- list()\n        }\n        ggplot(plotdat, aes(time, -depth)) +\n            night_ann +\n            geom_line(aes(colour = lightLev)) +\n            scale_colour_continuous(\"Light\\nLevel\") +\n            labs(y = \"Depth\", \n                 title = \"Depth plot\")\n        \n    })\n    \n})",
    "created" : 1431148196740.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "610444028",
    "id" : "3F8F03DA",
    "lastKnownWriteTime" : 1431150560,
    "path" : "~/Documents/ActiveProjects/SMTG_vis/gg_demo/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}